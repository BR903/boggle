Most of the code comprising the program is relatively straightforward.
The only part that could be described as complex is the code that
handles the compressed dictionary. Herein is a description of how the
dictionary is created and organized.

The dictionary is, abstractly speaking, a directed acyclic graph.
Nodes that corresponds to the end of some word are marked as such.
Each node has zero or more arcs leading out of it. Each arc is
labelled with a letter. Following a trail through the graph from the
root node to a node marked as a final node spells out a word.

When loaded into memory, this graph is stored as an array of 32-bit
values, each one representing an arc in the graph. Note that only the
arcs are represented explicitly in memory; the nodes of the graph are
implicit. Each arc contains three fields, arranged as follows:

  3 3             2 2
 |1|0             3|2                                           0|
 |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|
 end    letter                          next

The high bit (labelled "end") is zero for all but the last arc of a
given node. The bits marked "letter" contain the ASCII value of the
letter labelling the arc. "next" contains the index of the node the
arc points to (i.e., the index of the target node's first arc). A
node's arcs are sorted by their letter values.

All the arcs belonging to a single node are stored sequentially. The
index of a node is thus the index of the first arc in this sequence.

The arcs of the root node appear at the beginning of the array, so the
root node always has index zero. All final nodes (i.e., corresponding
to the end of a word) are stored at the end of the array, after the
non-final nodes. Thus, to complete the dictionary, it is only
necessary to know the index of the first final node in the array.

The last arc in the array is invariably a "dead end", a node with no
arcs leading out from it. All words in the dictionary which are not
the prefix of any other words end at this node. In order to have an
index for this node, it is given a single arc with a letter value of
zero.

When a new dictionary is first being created, the directed graph
metamorphoses through a number of representations that differ in the
details of their organization. These metamorphoses occur in the
functions in dbuild.c.

The first representation of the dictionary graph is created by
readwordlists(), as the wordlist source files are being read. In this
form, the arcs are created in a linked list of heaps, using the
following structure:

struct treearc {
    long	    nodeid;
    treearc	   *sibling;
    treearc	   *child;
    unsigned char   letter;
    char	    wordend;
};

Since the heaps are not contiguous, pointers are used to refer to
other arcs instead of indexes. The arcs leading out from a single node
are held together as a linked list via the sibling pointer. The child
pointer indicates the arc's target node, pointing to the head of the
node's linked list of arcs. The head arc of each node has a unique
nonzero value for the nodeid; the other arcs in each node have a
nodeid of zero. The wordend field is set to TRUE for the head arc of a
node that is at the end of a word.

The use of a linked list of heaps for this representation is most
convenient while the graph is first being built, since there is no way
of knowing beforehand how many arcs each node will need to have. In
each heap, the first treearc structure is reserved; its sibling
pointer points to the next heap in the linked list, and its child
pointer points to the end of this heap.

The readwordlists() function also tallies the number of occurrences of
each letter across the entire dictionary. After it is finished, the
computefrequencies() function uses this data to build a letter
frequency table.

The second representation is created by the serializetree() function.
In this representation, arcs are translated into their 32-bit forms,
and sibling arcs are brought together. To avoid putting unnecessary
strain on the memory, a temporary file is used in the process. The
function begins by iterating through all the arcs. Arcs belonging to a
single node are collected, sorted by letter, and written out to the
file consecutively. In place of the child pointer value, the nodeid of
the target node is used. Preceding each set of arcs in the file are
the values for the nodeid and wordend fields of the head arc.

Once this is done, all the heaps are deallocated. At this point, the
program knows the exact number of nodes and arcs in the current form
of the dictionary. It therefore allocates a new block of memory to
store the arcs. Actually, memory is allocated so as to allow two
copies of each arc to be stored; the extra space is needed in the next
phase, during compression.

The program also allocates another block of memory, which is used to
represent the nodes of the graph:

struct treenode {
    arc		   *arcs;
    arc		   *parcs;
    long	    group;
    treenode	   *nextingrp;
    unsigned char   arccount;
    unsigned char   wordend;
    unsigned char   grouped;
};

The arcs field is a pointer to an array of the arcs that originate at
this node. The arccount field contains the size of this array. The
wordend field holds the end-of-word flag. The parcs field points to
another array of arcs; this and the remaining fields are used in the
next phase.

As the contents of the temporary file are read back into memory, the
nodes are placed in order according to their nodeid values. Thus, the
nodeid values used in the arcs become indexes into the array of
treenode structures. The array of arcs is treated as a single heap,
and two sets of arcs are allocated to each node as it is read from the
file (one referenced by the arcs field, and one referenced by the
parcs field).

The next phase is embodied by the partitiontree() function. Using the
current representation, it compresses the directed graph by coalescing
equivalent nodes. The compression algorithm is the standard
partitioning of nodes method used to compress a DFA. (See the Dragon
Book for more information.) Since the graph is essentially a tree at
this point, there may be a better, more specific algorithm for
compressing it, but this algorithm works and the result is guaranteed
to be optimally compressed.

When it is complete, every node has been assigned a new positive
integer, stored in the group field, and only one node for each unique
number needs to be copied to the final compressed dictionary graph.

The third and last representation is created by writetreetofile().
writetreetofile() takes one node from each group, arranging them so
that the final nodes appear in the array after all the others, and
writes all the information out to the destination file. The node
structures are taken back out, leaving just an array of arcs.

The functions that read from and write to the dictionary file are in
dict.c: readdictfile(), writefilehead(), and writefilenodes().

The dictionary file representation is very similar to the one
described at the beginning of this file, when the dictionary is in
memory and is being used. The differences are mainly in the ordering
of the values (since the file is created to be endian-independent),
and in that the letter value is an index, rather than an actual ASCII
character.

At the top of the file created by this function is the following data:

byte 0:  0xCB			"magic number"
     1:  0xDF
     2:  size-alphabet		the number of letters in the alphabet
     3:  bytes-per-index	the size in bytes of a node index

The bytes-per-index value indicates how many bytes are used in the
file to represent an index of a node or arc. Thus a dictionary with
only 65000 arcs would need only two bytes for its indexes in the
file. Most dictionaries will likely have a value of three. Indexes are
stored in the file in little-endian order.

Following this is a table, three times size-alphabet bytes long:

byte 4:  letter-1		the first letter in the alphabet
     5:  lo-frequency-letter-1  a two-byte value giving the relative
     6:  hi-frequency-letter-1      frequency of the first letter
     7:  letter-2		the second letter in the alphabet
     8:  lo-frequency-letter-2  a two-byte value giving the relative
     9:  hi-frequency-letter-2      frequency of the second letter
   (etc.)

After this is a value giving the total number of arcs in the
dictionary, and a value giving the index of the first final node.
Both values are bytes-per-index bytes long.

The remainder of the file is the array of arcs itself. An arc is
stored with bytes-per-index bytes for the index value, followed by one
byte giving the letter index in the low seven bits and the end value
in the high bit. The alphabet table is used to map the letter index to
the corresponding ASCII character.

When a word needs to be looked up in the compressed dictionary, the
first node is examined by starting at the first set of arcs. The
character associated with each arc is tested until one matches the
first letter of the word, or until an arc with the end flag is
reached. In the latter case, the word is not in the dictionary, and
the process ends. In the former case, the node field gives the index
of the set of arcs to compare with the second letter, and so on. If
this process continues until all the letters in the word have been
successfully found, then the current index for the next set of arcs is
compared with the index stored at the top of the compressed dictionary
file. If the current index is greater than or equal to this number,
then the dictionary contains the word in question; otherwise, the word
only appears as a prefix of a larger word in the dictionary.

The file dcat.c, included with the distribution, contains a short,
standalone program that demonstrates how to read the compressed
dictionary file.
